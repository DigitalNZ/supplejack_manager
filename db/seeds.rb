user = User.where(email: 'sjdocker@email.com').empty? ? User.create(email: 'sjdocker@email.com', name: 'Supplejack Docker', password: 'password', password_confirmation: 'password', role: 'admin') : User.find_by(email: 'sjdocker@email.com')
partner = Partner.find_or_create_by(name: "Supplejack Docker")
source = Source.find_or_create_by(partner_id: BSON::ObjectId(partner.id), source_id: "supplejack_docker")

if Parser.where(name: "oaisample").empty?
  Parser.create(name: "oaisample", strategy: "oai", content: "class OaiSample < SupplejackCommon::Oai::Base\r\n  \r\n  # OAI feed\r\n  base_url \"http://otago.ourheritage.ac.nz/oai-pmh-repository/request\"\r\n  # metadata_prefix \"alternative_prefix\" # defaults to 'oai_dc '\r\n  # set \"specific_set\" # optional\r\n  \r\n  namespaces dc: 'http://purl.org/dc/elements/1.1/',\r\n  \t\t\t oai_dc: 'http://www.openarchives.org/OAI/2.0/oai_dc/',\r\n  \t\t\t\t\txsi: 'http://www.w3.org/2001/XMLSchema-instance',\r\n  \t\t\tdcterms: 'http://purl.org/dc/terms/',\r\n  \t\t\t\t\t\to: 'http://www.openarchives.org/OAI/2.0/'\r\n  \r\n  attributes :content_partner,     \tdefault: \"University of Otago\"\r\n  attributes :display_collection,   default: \"Otago University Research Heritage\"\r\n  attributes :copyright, :rights,   default: \"All rights reserved\"\r\n  # attributes :tag, \t\t\t\t\t\t\t\t\tdefault: [\"back_end\",\"machine_tags\"]\r\n\r\n  attribute :title,         xpath: \"//dc:title\"\r\n  attribute :description,   xpath: \"//dc:description\" \r\n  #attribute :date,          xpath: \"//dc:date\",        date: true\r\n  attribute :creator,\t      xpath: \"//dc:creator\"\r\n\r\n  attributes :landing_url do\r\n    fetch(\"//dc:identifier\").find_with(/^http:\\/\\/otago.ourheritage.ac.nz\\/items\\/show/)\r\n  end\r\n  \r\n  attribute :internal_identifier do\r\n    get(:landing_url).downcase\r\n  end\r\n  \r\n  attribute :category do\r\n    category = \"Images\"\r\n    category = \"Videos\" if fetch(\"//dc:type\").find_with(/^Video$/).present?\r\n    category\r\n  end\r\n  \r\n  attribute :subject do\r\n    subject = [\"bulk_default_subject\"]\r\n    subject += fetch(\"//dc:subject\").to_a\r\n    subject\r\n  end\r\n\r\n  attributes :large_thumbnail_url do\r\n    fetch(\"//dc:identifier\").find_with(/\\.jpg$/).mapping(/%2F/ => '/', /original/ => 'fullsize').first\r\n  end\r\n\r\n  attributes :thumbnail_url do\r\n    get(:large_thumbnail_url).mapping(/fullsize/ => 'square_thumbnails')\r\n  end\r\n  \r\n  # If any of the following criteria are met, that record will be skipped (not written) and the harvest will continue\r\n  reject_if do\r\n    get(:landing_url).find_with(/about_us/i).present? or\r\n    not get(:landing_url).find_with(/^http/i).present?\r\n  end\r\n\r\nend", data_type: "record", source_id: BSON::ObjectId(source.id), partner: partner.name, message: "initial seeded version", user_id: user.id)
end

if Parser.where(name: "jsonapisample").empty?
  Parser.create(name: "jsonapisample", strategy: "json", content: "class JsonApiSample < SupplejackCommon::Json::Base\r\n\r\n  # constructed API call requests last 30 days worth of suitable records\r\n  start_date = Date.today - 30.days \r\n\tbase_url \"https://api.aucklandmuseum.com/search/collectionsonline/_search?q=lastModifiedOn:%5B\#{start_date.strftime(\"%Y-%m-%d\").to_s}%20TO%20*%5D+AND+primaryRepresentation%3Ahttp*&pht=True&sort=lastModifiedOn:asc\"\r\n  paginate page_parameter: \"from\", type: \"item\", per_page_parameter: \"size\", page: 0, per_page: 10, total_selector: \"$hits.total\"\r\n\r\n  record_selector \"$hits.hits\"\r\n\t\r\n\tthrottle :host => \"api.aucklandmuseum.com\", :delay => 2\r\n\t \r\n  attribute  :category,          \tdefault: \"Images\"\r\n  attributes :content_partner,\t\tdefault: \"Auckland War Memorial Museum Tamaki Paenga Hira\"\r\n  attributes :display_collection,\tdefault: \"Auckland Museum Collections\"\r\n\t\r\n  #attributes :dc_identifier,   \t\t\t\t\t\t\tpath: \"_source.dc_identifier[*]\"\r\n  \r\n  attribute :landing_url do\r\n    \"http://www.aucklandmuseum.com/collection/object/\#{fetch('_id').mapping(/^.*\\/id\\/(.*)\\/(.*)\\/(.*)$/ => 'am_\\1-\\2-\\3').first}\"\r\n  end\r\n\t\r\n\tattribute  :internal_identifier do\r\n    fetch(\"_id\")\r\n\tend\r\n  \r\n  attributes :subject do\r\n    fetch(\"_source.subjectStatus[*]\") + fetch(\"_source.subjectCategory[*]\") + fetch(\"_source.kindOfSpecimen[*]\") + fetch(\"_source.classification[*].object[*]._all[*]\")\r\n  end  \r\n  \r\n  attribute :tag do\r\n    \"WW100\" if get(:subject).find_with(/World War, 1914-1918/).present?\r\n  end \r\n\t\r\n\tattribute  :title do\r\n    fetch(\"_source.appellation.'Primary Title'[*]\").first or fetch(\"_source.appellation.'Classification Display Value'[*]\").first or fetch(\"_source.dc_title[*]\").first\r\n\tend\r\n\t\r\n\tattribute  :description do\r\n    fetch(\"_source.dc_description[*]\").to_a.join(\" \")\r\n\tend\r\n\t\r\n\tattribute  :rights do\r\n    fetch(\"_source.copyright[*]\").to_a.join(\"; \")\r\n\tend\r\n  \r\n  attribute :copyright do\r\n    copyright = \"All rights reserved\"\r\n    copyright = \"Some rights reserved\"  if get(:rights).find_with(/Auckland Museum CC BY/i).present?\r\n    copyright = \"No known copyright restrictions\" if get(:rights).find_with(/^No\\sknown\\scopyright/i).present?\r\n    copyright\r\n  end\r\n  \r\n  attributes :thumbnail_url do\r\n    #\"http://webapi.aucklandmuseum.com/media/\#{fetch('_source.primaryRepresentation').mapping(/^.*aucklandmuseum\\.com\\// => '').first}/preview.jpg\"\r\n    \"http://media\#{fetch('_source.primaryRepresentation').mapping(/^http:\\/\\// => '.').first}?rendering=preview.jpg\"\r\n  end\r\n  \r\n  attributes :large_thumbnail_url do\r\n    # cant rely on 'original.jpg' as it can be too big http://webapi.aucklandmuseum.com/media/vernon/av/246911/original.jpg\r\n    get(:thumbnail_url).mapping(/preview\\./ => 'standard.').first\r\n  end\r\n  \r\n\tattribute :locations do \r\n    locations = []\r\n    if fetch(\"_source.dc_place\").present?\r\n      fetch(\"_source.dc_place[*]\").to_a.each do |name|\r\n        location = {\r\n          placename: name.to_s,\r\n          comment: \"Location provided by Auckland War Memorial Museum Tamaki Paenga Hira\"\r\n          }\r\n        locations << location\r\n      end\r\n    end\r\n    locations\r\n  end\r\n  \r\nend", data_type: "record", source_id: BSON::ObjectId(source.id), partner: partner.name, message: "initial seeded version", user_id: user.id)
end

if ParserTemplate.where(name: "sitemapsample").empty?
  ParserTemplate.create(name: "sitemapsample", content: "# Basic sitemap template\r\n\r\nbase_url \"url of where the sitemap lives\" \r\n#basic_auth \"username\", \"password\" # Uncomment if you require basic auth\r\n\r\nsitemap_entry_selector \"//sitemap:loc\"\r\n\r\n#Can be used to split out (harvest) multiple records from a single webpage (ie a list of seach results, or a table of items)\r\nrecord_selector '//html' # This treats the whole page as 1 record\r\n\r\nrecord_format :html\r\n\r\n#throttle :host => \"www.base_url_of_resources_being_harvested.com\", :delay => 1 # Uncomment if you require a throttle on a host.\r\n\r\nnamespaces sitemap: \"http://www.sitemaps.org/schemas/sitemap/0.9\" # Define any namespaces you need.\r\n\r\nattribute  :category,            \tdefault: \"Images\"\r\nattributes :content_partner,     \tdefault: \"National Library of New Zealand\"\r\nattributes :display_collection,   default: \"National Library Website\"\r\n\r\nattributes :title, \t\t\t\t\t\t\t\t\txpath: \"//head/title\"\r\nattributes :description, \t\t\t\t\t\txpath: \"//head/meta[@name='description']/@content\"\r\nattributes :subject, \t\t\t\t\t\t\t\txpath: \"//head/meta[@name='keywords']/@content\"\r\n\r\nattributes :landing_url do\r\n  [@url] # gets the current url of the resource/webpage being scraped\r\nend\r\n  \r\nattributes :internal_identifier do\r\n  get(:landing_url).downcase\r\nend\r\n\r\nattributes :thumbnail_url do\r\n  if get(:category).find_with(/Images/).present? and fetch(\"//div[@class='field-items']/div/img/@src\").present?\r\n    fetch(\"//div[@class='field-items']/div/img/@src\")\r\n  end\r\nend\r\n\r\nattribute :rights_url do\r\n  get(:rights).find_with(/^http/)\r\nend\r\n\r\nattribute :copyright do\r\n  copyright = \"All rights reserved\"    # defaults to this if nothing found below \r\n  copyright = \"Some rights reserved\" if fetch(\"//div[@class='license']/a/@href\").find_with(/creative.?commons/i).present?\r\n  copyright    \r\nend", user_id: user.id)
end
